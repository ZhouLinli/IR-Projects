---
title: "Core Course Review (2018 Fall-2022 Spring)"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r loaddf, include=FALSE}
#load all necessary packages and themes, global optin chunk
source("/Users/linlizhou/Documents/Rprojects/IR-Projects/theme_source.R")

#change format: html (for render in Viewer) 
#to the following for the word doc. version report
#format: 
#  docx:
#    reference-doc: /Users/linlizhou/Documents/Rprojects/lasell.report.IN-USE.docx
#    prefer-html: true

#the following df are created from "/Users/linlizhou/Documents/Rprojects/IR-Projects/theme_source.R" 
#enrollment of core courses
sectiontally<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/Section Tally_1822core.xls")
#grades of core courses: unique id's background
stucrs.id<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/StudentInfoCourse_1822core_dedupid.xlsx")
#grades of core courses:
stucrs<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/StudentInfoCourse_1822core.xlsx")
#2018 cohort's core courses
corepath.ls<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 Core Curriculum/data files/path_df_18cohort.xlsx")
#grades of aac courses
aac.crs<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 AAC/data files/StudentInfoCourse_1822aac.xlsx")
#for those who take aac103 more than once, their term comparison
retake.change<-read_xlsx("/Volumes/lasellshare/Faculty_Staff_Shares$/IR/Data and Analyses/Program Review/2022 AAC/data files/aac103retake_termchanges.xlsx")


#reporting-goal/items

#DONE-For each term (fall/spring): # courses/ sections offered in each core segment – SECTION TALLY
#DONE-For each term (fall/spring): # registration in each core segment – SECTION TALLY
#DONE- % of pass, C or better, and Withdrawal; Average GPA (and SD) of each courses – STU INFO BY COURSE
#DONE-All core course enrollment and transfer proportion – deduplicated student count in STU INFO BY COURSE
#DONE/HIDE-All core course retention – STARFISH RETENTION REPORT
#DONE-Satisfaction – 2018-2022 4 years of satisfaction prt in that one question containing "core"
#DONE-course-taking sequence – 2018 COHORT BY GRADUATION IN 2022 OR NOT – POWERCAMPUS TRANSCRIPT
```

```{r funs}
#define conditional formatting
cf<-function(x,a=20,b=10,
             col1=color_bluedeepsea,col2=color_bluelightsky,col3=color_grey){
    if_else(x>a,col1,#if value>20, then use color1
            if_else(x>b,col2,#if 20>value>10, then use color2
                    col3))}#if value<=10, then use color3

#define column conditional format: n-th column, white text, background condfmt
#col_cf<-function(i=1,kbl=static_tab.sec,df=tab.sec){column_spec(
 # kable_input=kbl,column=i,color = "white",background =cf(df[i]))}
```

# Sections offered

```{r tab.sec}
#vars needed: coursecode, CourseGroup
#For each term (fall/spring): # courses/ sections offered in each core segment -- SECTION TALLY

#number of total section offered
#sectiontally%>%group_by(CourseGroup)%>%summarise(section_n=n())

#number of term section offered
tab.sec<-sectiontally%>%group_by(CourseGroup,term)%>%
  summarise(section_n=n())%>%
  mutate(Total=sum(section_n))%>%
  pivot_wider(names_from = term, values_from = section_n)%>%
  select(CourseGroup,Total,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)
```

```{r static_tab.sec}
#show the table
static_tab.sec<-tab.sec%>%adorn_totals()%>%#add total row this won't saved in df
kbl(label="tab.sec",#in-text reference
    caption = "Core course section offered each term", #table title
    col.names =c("",names(tab.sec)[2:ncol(tab.sec)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                #the same as: kable_material(c("striped", "hover")) 
                #less than 3 row then use: kable_minimal()
#fill the page width-wise,#header stay when scroll
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#failed attempt set total row's condfmt based on row value: mutate(across(1:ncol(tab.sec2),~cell_spec(.x,color=ifelse(CourseGroup=="Total"&.x>100,"blue","white"))))

#set total col
column_spec(2, color="black",background =cf(x=tab.sec[2],a=169,b=148,col1 =color_yellowdark,col2=color_yellowlight,col3="white"))%>%
#set total row
row_spec(nrow(tab.sec)+1,color="black",background = "white")%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")
#optional tolltip: popover = paste("am:", tab.sec$`2018 Fall`)
#%>%footnote("")#ncol(tab.sec)
#inctead of kbl; can use gt::gt()%>%tab_header(title = "How many core course sections are offered each term?")

#apply cf to multi columns
for (i in 3:ncol(tab.sec)){
static_tab.sec<-column_spec(
  kable_input=static_tab.sec,
  column=i,color = "white",background =cf(tab.sec[i]))
i=i+1
static_tab.sec}
```

```{r interactive_tab.sec}
#interactive table
interactive_tab.sec<-datatable(
  #which table to show
  data = tab.sec,
  #table show in compact format
  class = "compact",#display
  #set table's font family
  options = list(initComplete = JS("function(settings, json) {",
        "$('body').css({'font-family': 'Georgia'});","}")),
  #set header font size: "$(this.api().table().header()).css({'font-size': '50%'});"
  #set table caption
  caption = "Core course section offered each term",
  #column/header names
  colnames =c("",names(tab.sec)[2:ncol(tab.sec)]),
  #place filter at the top
  filter = "top")#%>%DT::formatStyle(columns = colnames(tab.sec), fontSize = '50%')
```

```{r plot.sec}
#found that this is not necessary; just add a total row in the table with conditional formatting would work
plot.sec<-sectiontally%>%group_by(term,CourseGroup)%>%summarise(section_n=n())%>%
  mutate(term_cnt=sum(section_n))%>%#mutate(prt=term_cnt/sum(term_cnt))%>%
  select(term,term_cnt)%>%unique()%>%
  mutate(term_cnt_group=if_else(term_cnt>169,"high",
          if_else(term_cnt>148,"medium","low")))%>%
  
  ggplot(aes(x=factor(term, levels = c("2018 Fall","2019 Spring","2019 Fall","2020 Spring","2020 Fall","2021 Spring","2021 Fall","2022 Spring")),
             y=term_cnt,fill=term_cnt_group))+
  
  geom_bar(stat = "identity")+
  scale_fill_manual(values = c(color_yellowdark,color_greylight,color_grey))+
  geom_text(aes(label=term_cnt),size=3,vjust=0.5, hjust=0.7, fontface="bold")+
  labs(title="Total number of core course sections each term",x="",y="")+
  theme_lz()+theme(axis.text.x = element_text(),legend.position = "none")
```

```{r}
tab.sec%>%pivot_longer(cols = `2018 Fall`:`2022 Spring`,names_to = "term",values_to = "#section")%>%
ggplot(aes(x=term,y=`#section`,fill=CourseGroup))
```

```{r showviz.sec, include=TRUE}
static_tab.sec
interactive_tab.sec
plot.sec
```

# Enrollments

```{r tab.reg}
#vars needed: Current_Enrollment
# For each term (fall/spring): # registration in each core segment -- SECTION TALLY 
tab.reg<-sectiontally%>%group_by(CourseGroup,term)%>%summarise(enrollment=sum(Current_Enrollment))%>%mutate(Total=sum(enrollment))%>%
  mutate(prt=formattable::percent(enrollment/Total,digit=0))%>%select(-enrollment)%>%
  pivot_wider(names_from = term, values_from = prt)%>%
  #reorder cols
  select(CourseGroup,Total,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)#%>%View()
```

```{r static_tab.reg}
#show the table
static_tab.reg<-tab.reg%>%#adorn_totals()%>%add total row this won't saved in df
kbl(label="tab.reg",#in-text reference
    caption = "Core course enrollment each term", #table title
    col.names =c("",names(tab.reg)[2:ncol(tab.reg)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
                #the same as: kable_material(c("striped", "hover")) 
                #less than 3 row then use: kable_minimal()
#fill the page width-wise,#header stay when scroll
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set total col
column_spec(2, color="black",background =cf(x=tab.reg[2],a=3000,b=2500,col1 =color_yellowdark,col2=color_yellowlight,col3="white"))%>%
#set total row: row_spec(nrow(tab.reg)+1,color="black",background = "white")%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")

#apply cf to multi columns
for (i in 3:ncol(tab.reg)){
static_tab.reg<-column_spec(
  kable_input=static_tab.reg,
  column=i,color = "white",background =cf(tab.reg[i],a=0.2,b=0.1))
i=i+1
static_tab.reg}
```

```{r showviz.reg, include=TRUE}
static_tab.reg
```

## Un-duplicated Headcount

```{r tab.stu-deduplicated student count by term}
tab.stu<-stucrs%>%group_by(term)%>%summarise(n=n_distinct(people_code_id))%>%
#%>%select(n)%>%colSums(n)#10549 ppid adding separate terms together
  pivot_wider(names_from = term,values_from = n)%>%
  mutate(Term="Unduplicated Headcount")

names(tab.stu)<-names(tab.stu)%>%str_replace("FALL","Fall")%>%str_replace("SPRING","Spring")

tab.stu<-tab.stu%>%
  select(Term,`2018 Fall`,`2019 Spring`,`2019 Fall`,`2020 Spring`,`2020 Fall`,`2021 Spring`,`2021 Fall`,`2022 Spring`)#%>%View()
```

```{r}
static_tab.stu<-tab.stu%>%
kbl(label="tab.stu",#in-text reference
    caption = "Student headcount each term", #table title
    col.names =c("",names(tab.stu)[2:ncol(tab.stu)])) %>%#header names
#set overall style
  kable_styling(bootstrap_options = c("striped", "hover", "condensed", "responsive"),
#fill the page width-wise,#header stay when scroll
              full_width = F, position = "float_left",fixed_thead = T, font_size = 12)%>%
#set total col: column_spec(2, color="black",background =cf(x=tab.reg[2],a=3000,b=2500,col1 =color_yellowdark,col2=color_yellowlight,col3="white"))%>%
#set total row: row_spec(nrow(tab.reg)+1,color="black",background = "white")%>%
#set header row
row_spec(0,align = "c",color="black")%>%
#set first column: 
  column_spec(1, bold = T, border_right = F, background = "white", width = "15em",color="black")

#apply cf to multi columns
for (i in 2:ncol(tab.stu)){
static_tab.stu<-column_spec(
  kable_input=static_tab.stu,
  column=i,color = "white",background =cf(tab.stu[i],a=1300,b=1200))
i=i+1
static_tab.stu}
```

```{r showviz.stu, include=TRUE}
static_tab.stu
```

## Transfer status

```{r transfer status of students}
#transfer status percent
stucrs.id%>%group_by(term,transfer)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(transfer=="Y")%>%select(term,prt)%>%
  pivot_wider(names_from = term, values_from = prt)#%>%View()
```

## Retention term to term (using stucrs.id)

```{r retention}
fa18<-stucrs.id%>%filter(term=="2018 FALL")
sp19<-stucrs.id%>%filter(term=="2019 SPRING")
fa19<-stucrs.id%>%filter(term=="2019 FALL")
sp20<-stucrs.id%>%filter(term=="2020 SPRING")
fa20<-stucrs.id%>%filter(term=="2020 FALL")
sp21<-stucrs.id%>%filter(term=="2021 SPRING")
fa21<-stucrs.id%>%filter(term=="2021 FALL")
sp22<-stucrs.id%>%filter(term=="2022 SPRING")

#term to term retention
ret18fa<-summary(fa18$people_code_id%in%sp19$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret19sp<-summary(sp19$people_code_id%in%fa19$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret19fa<-summary(fa19$people_code_id%in%sp20$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret20sp<-summary(sp20$people_code_id%in%fa20$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret20fa<-summary(fa20$people_code_id%in%sp21$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret21sp<-summary(sp21$people_code_id%in%fa21$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

ret21fa<-summary(fa21$people_code_id%in%sp22$people_code_id)%>%
  as.array()%>%as.data.frame()%>%filter(Var1!="Mode")%>%
  mutate(ret=as.numeric(Freq[2])/ (as.numeric(Freq[1])+as.numeric(Freq[2])))%>%
  select(ret)%>%unique()

#attach together
tibble(term=c("2018 FALL","2019 SPRING","2019 FALL","2020 SPRING","2020 FALL","2021 SPRING","2021 FALL"),
       retention=c(ret18fa,ret19sp,ret19fa,ret20sp,ret20fa,ret21sp,ret21fa))%>%
  mutate(retention=formattable::percent(retention,digits = 0))%>%
  pivot_wider(names_from = term, values_from = retention)#%>%View()
```

# Reporting Student Grades

## C/Pass/Withdraw (using stucrs)

```{r report C/Pass/Withdraw}
# % of C or better (A, A-, B+, B, B-, C+, C or P)
# % of pass (not F or W) for each segment
# % of Withdrawal (W)
stucrs%>%group_by(term,grade)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  select(-cnt)%>%pivot_wider(names_from = term,values_from = prt)#%>%View()

# by segment/coursegroup

##figuring out how to order vars in group by:
#stucrs%>%filter(term=="2018 FALL")%>%
#  group_by(CourseGroup,grade)%>%summarise(cnt=n())%>%
#  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
#  select(-cnt)%>%pivot_wider(names_from = grade,values_from = prt)#%>%View()

##OVERALL
stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  select(-cnt)%>%pivot_wider(names_from = term,values_from = prt)#%>%View()

#C or better by coursegroup
stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(grade%in%c("C or better"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  pivot_wider(names_from = term,values_from = `C or better`)#%>%View()

#pass
stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade%in%c("C or better","D"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  replace(is.na(.), 0)%>%
  mutate(pass=`C or better`+D)%>%select(-`C or better`,-D)%>%
  mutate(pass=formattable::percent(pass,digits = 0))%>%
  pivot_wider(names_from = term,values_from = pass)#%>%View()

#withdrawl by coursegroup
stucrs%>%
  group_by(term,CourseGroup,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%filter(grade=="W")%>%
  replace(is.na(.), 0)%>%#actually prt have no NA values
  select(-cnt)%>%pivot_wider(names_from = term,values_from = prt)#%>%View()#it is after pivotwider that some terms do not have a value (i.e. have NA)
 # replace(is.na(.), 0)%>%#actually prt have no NA values
  
```

## GPA (using stucrs)

```{r report GPA}
# Average GPA (and SD): 
stucrs%>%group_by(term)%>%summarise(mn=round(mean(GPA,na.rm=T),digits = 2),
                                          sd=round(sd(GPA,na.rm=T),digits = 2))#%>%View()#tanspose when paste
#GPA by segment/coursegroup
stucrs%>%group_by(term,CourseGroup)%>%summarise(mn=round(mean(GPA,na.rm=T),digits = 2))%>%
  pivot_wider(names_from = term,values_from = mn)#%>%View()
```

### Investigate FYS/SciInq (using stucrs)

```{r focus on FYS/SciInq}
#In grade table, FYS in spring and SciInq in fall has weried pattern of being sig. lower. To investigate what are the most at-risk courses: 
#lay out all FYS/SciInq courses by term (fall vs spring) w/t % pass

#stucrs%>%count(CourseGroup)
#FYS
stucrs%>%filter(CourseGroup%in%c("FYS"))%>%
  group_by(term,coursecode,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade%in%c("C or better","D"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  replace(is.na(.), 0)%>%
  mutate(pass=`C or better`+D)%>%select(-`C or better`,-D)%>%
  mutate(pass=formattable::percent(pass,digits = 0))%>%
  pivot_wider(names_from = term,values_from = pass)#%>%View()

#SciInq
stucrs%>%filter(CourseGroup%in%c("Scientific Inquiry & Problem Solving"))%>%
  group_by(term,coursecode,grade)%>%summarise(cnt=n())%>%
  #mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  mutate(prt=cnt/sum(cnt))%>%
  filter(grade%in%c("C or better","D"))%>%
  select(-cnt)%>%pivot_wider(names_from = grade, values_from = prt)%>%
  replace(is.na(.), 0)%>%
  mutate(pass=`C or better`+D)%>%select(-`C or better`,-D)%>%
  mutate(pass=formattable::percent(pass,digits = 0))%>%
  pivot_wider(names_from = term,values_from = pass)#%>%View()
```

## Reporting enrollment across term (using corepath.ls)

```{r report prt of term for coursegroup}
#OVERALL - each coursegroup, prt of each term
#approach 1- need to manually replace NA with 0 (cannot use replace in formattable % format)
#corepath.ls%>%group_by(CourseGroup,term)%>%summarise(cnt=n())%>%
#  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 1))%>%
#  select(-cnt)%>%pivot_wider(names_from = CourseGroup, values_from = prt)#%>%View()
#approach 2- decimal points
corepath.ls%>%group_by(CourseGroup,term)%>%summarise(cnt=n())%>%
  mutate(prt=round(cnt/sum(cnt),digits = 3))%>%
  select(-cnt)%>%pivot_wider(names_from = CourseGroup, values_from = prt)%>%
  replace(is.na(.), 0)#%>%View()#mutate(across(Writing:Capstone,funs(paste0(.* 100, "%"))))#failed to convert to %
  


#graduated vs not graduated students
#graduated
corepath.ls%>%filter(matric=="Graduated")%>%
  group_by(CourseGroup,term)%>%summarise(cnt=n())%>%
  mutate(prt=round(cnt/sum(cnt),digits = 3))%>%
  select(-cnt)%>%pivot_wider(names_from = CourseGroup, values_from = prt)%>%
  replace(is.na(.), 0)#%>%View()#mutate(across(Writing:Capstone,funs(paste0(.* 100, "%"))))#failed to convert to %
  
#not graduated
corepath.ls%>%filter(matric=="Not Graduate")%>%
  group_by(CourseGroup,term)%>%summarise(cnt=n())%>%
  mutate(prt=round(cnt/sum(cnt),digits = 3))%>%
  select(-cnt)%>%pivot_wider(names_from = CourseGroup, values_from = prt)%>%
  replace(is.na(.), 0)#%>%View()#mutate(across(Writing:Capstone,funs(paste0(.* 100, "%"))))#failed to convert to %
  
#AFTER COPY PASTE IN EXCEL: 1. I calculated the difference between grad vs not graduated - hilight high prt to show popular terms for each courses. 2. Used conditional formmatting for difference>0.1 or <-0.1 
# in the path itself: I removed anything after the first course (i.e., for 1,2,3 meaning student aking the course in the 1st, 2nd, and 3rd semester, I only keep the 1st semester -- due to the definition of core course is the first course that student take in that course category)
```

# AAC Review

## Enrollment (using aac.crs)

```{r unduplicated enrollment}
aac.crs%>%group_by(term,coursecode)%>%summarise(n=n_distinct(people_code_id))%>%
#%>%select(n)%>%colSums(n)#10549 ppid adding separate terms together
  pivot_wider(names_from = term,values_from = n)#%>%View()
```

## Pass% (using aac.crs)

```{r pass vs fail}
# report prt students pass
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(passfail%in%c("Pass"))%>%
  select(-cnt)%>%pivot_wider(names_from = passfail, values_from = prt)%>%
  pivot_wider(names_from = term,values_from = Pass)#%>%View()
```

## Semester GPA (using aac.crs)

```{r semester GPA by passfail}
#PASSED students' mean semester GPA
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail)%>%
  summarise(mn=round(mean(Semester_GPA,na.rm=TRUE),digits=1))%>%
  filter(passfail%in%c("Pass"))%>%
  pivot_wider(names_from = passfail, values_from = mn)%>%
  pivot_wider(names_from = term,values_from = Pass)#%>%View()
#FAILED students' mean semester GPA
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail)%>%
  summarise(mn=round(mean(Semester_GPA,na.rm=TRUE),digits=1))%>%
  filter(passfail%in%c("Fail"))%>%
  pivot_wider(names_from = passfail, values_from = mn)%>%
  pivot_wider(names_from = term,values_from = Fail)#%>%View()
```

## Semester GPA Category (using aac.crs)

```{r semester GPA category by pass fail}
#How many students PASS AAC103 and finish the semester with a 2.0 or higher vs lower semester GPA
#count for those who PASSED,  
#semGPA that higher than 2.0
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail,semGPA)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(passfail%in%c("Pass"))%>%
  select(-cnt)%>%pivot_wider(names_from = passfail, values_from = prt)%>%
  pivot_wider(names_from = term,values_from = Pass)%>%
  filter(semGPA=="higher than 2")%>%select(-semGPA)#%>%View()
#semGPA that lower than 2.0
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail,semGPA)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(passfail%in%c("Pass"))%>%
  select(-cnt)%>%pivot_wider(names_from = passfail, values_from = prt)%>%
  pivot_wider(names_from = term,values_from = Pass)%>%
  filter(semGPA=="lower than 2")%>%select(-semGPA)#%>%View()

#How many students FAIL AAC103 and finish the semester with a 2.0 or higher vs lower than a 2.0 semester GPA
#count for those who FAILED,  
#semGPA that higher than 2.0
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail,semGPA)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(passfail%in%c("Fail"))%>%
  select(-cnt)%>%pivot_wider(names_from = passfail, values_from = prt)%>%
  pivot_wider(names_from = term,values_from = Fail)%>%
  filter(semGPA=="higher than 2")%>%select(-semGPA)#%>%View()
#semGPA that lower than 2.0
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail,semGPA)%>%summarise(cnt=n())%>%
  mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%
  filter(passfail%in%c("Fail"))%>%
  select(-cnt)%>%pivot_wider(names_from = passfail, values_from = prt)%>%
  pivot_wider(names_from = term,values_from = Fail)%>%
  filter(semGPA=="lower than 2")%>%select(-semGPA)#%>%View()
```

## Cumulative GPA (using aac.crs)

```{r cumulative GPA by passfail}
#PASSED students' mean cumulative GPA
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail)%>%
  summarise(mn=round(mean(Cumulative_GPA,na.rm=TRUE),digits=1))%>%
  filter(passfail%in%c("Pass"))%>%
  pivot_wider(names_from = passfail, values_from = mn)%>%
  pivot_wider(names_from = term,values_from = Pass)#%>%View()
#FAILED students' mean cumulative GPA
aac.crs%>%filter(!is.na(passfail))%>%#remove anything that was not defined by pass or fail
  group_by(term,coursecode,passfail)%>%
  summarise(mn=round(mean(Cumulative_GPA,na.rm=TRUE),digits=1))%>%
  filter(passfail%in%c("Fail"))%>%
  pivot_wider(names_from = passfail, values_from = mn)%>%
  pivot_wider(names_from = term,values_from = Fail)#%>%View()
```

## Retaking AAC103 (using retake.change)

```{r report retake.aac103}
#how many passed/semgpa for the first time?
retake.change%>%group_by(semGPA_1sttime,grade_1sttime)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)%>%
  pivot_wider(names_from = grade_1sttime, values_from = prt)#%>%View()#around 14-21% students failed and a majority passed aac103; difference between different semGPA groups is only 7%
#report N
retake.change%>%count(semGPA_1sttime)

#compared grade in 2nd to 1st, Increase/Decrease/Same?
retake.change%>%group_by(grade_1to2)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#

#compared semgpa in 2nd to 1st, Increase/Decrease/Same?
retake.change%>%group_by(semGPA_1to2)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#



#how many have a 3rd term
retake.change%>%filter(!is.na(grade_2to3))%>%nrow()

#compared grade in 3rd to 2nd, Increase/Decrease/Same?
retake.change%>%filter(!is.na(grade_2to3))%>%
  group_by(grade_2to3)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#

#compared semgpa in 3rd to 2nd, Increase/Decrease/Same?
retake.change%>%filter(!is.na(semGPA_2to3))%>%
  group_by(semGPA_2to3)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#




#how many have a 4th term
retake.change%>%filter(!is.na(grade_3to4))%>%nrow()

#compared grade in 3rd to 2nd, Increase/Decrease/Same?
retake.change%>%filter(!is.na(grade_3to4))%>%
  group_by(grade_3to4)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#

#compared semgpa in 3rd to 2nd, Increase/Decrease/Same?
retake.change%>%filter(!is.na(semGPA_3to4))%>%
  group_by(semGPA_3to4)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#




#how many have a 5th term
retake.change%>%filter(!is.na(grade_4to5))%>%nrow()

#compared grade in 3rd to 2nd, Increase/Decrease/Same?
retake.change%>%filter(!is.na(grade_4to5))%>%
  group_by(grade_4to5)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#

#compared semgpa in 3rd to 2nd, Increase/Decrease/Same?
retake.change%>%filter(!is.na(semGPA_4to5))%>%
  group_by(semGPA_4to5)%>%summarise(cnt=n())%>%mutate(prt=formattable::percent(cnt/sum(cnt),digits = 0))%>%select(-cnt)#%>%View()#

```
